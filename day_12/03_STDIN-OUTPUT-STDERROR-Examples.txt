==================================================================================
            Symbols 
==================================================================================
   STDIN/STDOUT/STDERR handling Operator 
==================================================================================
1- ;
2- |
==================================================================================

3-  >     ==> it can store the output of any command into any file. OR Overwritting Symbol
4-  >>    ==> it can append the data into any existing file without data overwriting.
==================================================================================
  Alternate  ==> tee and  tee  -a
==================================================================================

STDIN/STDOUT/STDERR

1- STDOUT    ==> > and >> ==> It is only use to store any correct output without any errors OR without any warning messages on the screen.
2- STDERR    ==> 2> and 2>>  ==> it is use to store errors OR warning messages into any file.

3- STDIN     ==> --stdin  ==> standard Input  ==> it is used to take input from the keyboard automatically on the screen

==================================================================================
  &>
  &>>      error and output both  ==> as it is 

> /dev/null  ==> Blank ==> Nothing will store in this file  # empty characters file
>>  /dev/null
2>  /dev/null
2>>  /dev/null 

2>&1    ===> 
==================================================================================


Live Examples:

[root@localhost ~]# 
[root@localhost ~]# lsblk 
NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS
sda      8:0    0   30G  0 disk 
├─sda1   8:1    0    1G  0 part /boot
├─sda2   8:2    0 14.6G  0 part /
└─sda3   8:3    0    2G  0 part [SWAP]
sr0     11:0    1 1024M  0 rom  
[root@localhost ~]# 
[root@localhost ~]# lsblk  > /tmp/info
[root@localhost ~]# 
[root@localhost ~]# date >> /tmp/info 
[root@localhost ~]# 
[root@localhost ~]# cat /tmp/info
NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS
sda      8:0    0   30G  0 disk 
├─sda1   8:1    0    1G  0 part /boot
├─sda2   8:2    0 14.6G  0 part /
└─sda3   8:3    0    2G  0 part [SWAP]
sr0     11:0    1 1024M  0 rom  
Sun Mar  9 10:49:54 AM IST 2025
[root@localhost ~]# 

==================================================================================


[root@localhost ~]# useradd sachin 
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# su - sachin  
[sachin@localhost ~]$ 
[sachin@localhost ~]$ find /etc -name passwd

    1  find /etc -name passwd
    2  exit
    3  find /etc -name passwd
    4  find /etc -name passwd    >   /tmp/output  # it does not store errors and warnings
    5  cat /tmp/output 
    6  find /etc  -name group
    7  find /etc  -name group >>  /tmp/output # it does not store errors and warnings
    8  cat  /tmp/output 
    9  find /etc -name passwd
   10  find /etc -name passwd  2>  /tmp/error  # it does store errors and warnings
   11  cat /tmp/error 
   12  find /etc -name group  2>>  /tmp/error
   13  cat /tmp/error 
   14  find /etc  -name passwd 
   15  find /etc  -name passwd 2>/dev/null # it does not store anything
   16  cat  /dev/null
   17  find /etc  -name passwd > /dev/null 
   18  find /etc  -name passwd 
   19  find /etc  -name passwd  &> /tmp/allinone
   20  cat  /tmp/allinone 
   21  find /etc  -name group  &>> /tmp/allinone
   22  cat  /tmp/allinone 
   23  find /etc -name passwd 
   24  find /etc -name passwd >   /tmp/output   2> /tmp/error
   25  cat  /tmp/output 
   26  cat  /tmp/error 
   27  find /etc -name group  >>   /tmp/output   2>> /tmp/error
   28  cat  /tmp/output 
   29  cat  /tmp/error 
   30  find /etc -name group  >>   /tmp/output   2>/dev/null 
   31  cat /tmp/output 
   32  cat /dev/null 
   33  find /etc -name group  > /dev/null   
   34  find /etc -name group  2> /dev/null   
   35  find /etc -name group  >  /dev/null  2> /dev/null   
   36  find /etc -name group  >  /tmp/output   2> /tmp/error   
   37  cat /tmp/output 
   38  cat /tmp/error 
   39   
   40  history 
   41  find /  -name passwd 
   42  find /  -name passwd  | less 
   43  find /  -name passwd  2>&1   | less # it will return outptu pagewise manner


================================================================================



root@localhost ~]# find  /  -user sachin 
find: ‘/proc/9433/task/9433/fd/6’: No such file or directory
find: ‘/proc/9433/task/9433/fdinfo/6’: No such file or directory
find: ‘/proc/9433/fd/5’: No such file or directory
find: ‘/proc/9433/fdinfo/5’: No such file or directory
/tmp/output
/tmp/error
/tmp/allinone
/var/spool/mail/sachin
/home/sachin
/home/sachin/.mozilla
/home/sachin/.mozilla/extensions
/home/sachin/.mozilla/plugins
/home/sachin/.bash_logout
/home/sachin/.bash_profile
/home/sachin/.bashrc
/home/sachin/.cache
/home/sachin/.bash_history
/home/sachin/.lesshst
[root@localhost ~]# 


  212  find  /  -user sachin 
  213  find  /  -user sachin  2>  /dev/null
  214  find  /  -user sachin  >  /tmp/output 
  215  cat /tmp/output 
  216  find  /  -user sachin  &>   /tmp/allinone 

=================================================================

[root@localhost ~]# vim hello.sh 
echo hello india

:wq!

[root@localhost ~]# sh hello.sh 
hello india
[root@localhost ~]# 
[root@localhost ~]# ./hello.sh
bash: ./hello.sh: Permission denied # due to no executable Permission
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# ls -l  hello.sh 
-rw-r--r--. 1 root root 17 Mar  9 11:10 hello.sh
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# ./hello.sh  2>/dev/null 
[root@localhost ~]# 
[root@localhost ~]# 

=====================================================================
What is the meaning of exit status ? ===> to find out the error code about just last command execution

Error Code ===>  0 to 255  

$?  ===> to check exit code of just last command 


zero  ===> means ===> last command successfully executed 
Non Zero  ===> having some thing  error code

=====================================================================
[root@localhost ~]# ls
abc              Desktop    Downloads  krnetworkcloud  Pictures  Templates
anaconda-ks.cfg  Documents  hello.sh   Music           Public    Videos
[root@localhost ~]# 
[root@localhost ~]# echo $?
0
[root@localhost ~]# 
[root@localhost ~]# echo hello india 
hello india
[root@localhost ~]# 
[root@localhost ~]# echo $?
0
[root@localhost ~]# 
[root@localhost ~]# datesssss
bash: datesssss: command not found...
[root@localhost ~]# 
[root@localhost ~]# echo $?
127
[root@localhost ~]# 

[root@localhost ~]# ./hello.sh
bash: ./hello.sh: Permission denied
[root@localhost ~]# 
[root@localhost ~]# echo $?
126
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# ifconfig 
ens160: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.1.107  netmask 255.255.255.0  broadcast 192.168.1.255
        inet6 fe80::20c:29ff:fe64:e1ad  prefixlen 64  scopeid 0x20<link>
        ether 00:0c:29:64:e1:ad  txqueuelen 1000  (Ethernet)
        RX packets 9516  bytes 4347726 (4.1 MiB)
        RX errors 0  dropped 1923  overruns 0  frame 0
        TX packets 3845  bytes 295695 (288.7 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10<host>
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 42  bytes 4520 (4.4 KiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 42  bytes 4520 (4.4 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

[root@localhost ~]# ping 192.168.1.107
PING 192.168.1.107 (192.168.1.107) 56(84) bytes of data.
64 bytes from 192.168.1.107: icmp_seq=1 ttl=64 time=0.058 ms
64 bytes from 192.168.1.107: icmp_seq=2 ttl=64 time=0.055 ms
64 bytes from 192.168.1.107: icmp_seq=3 ttl=64 time=0.050 ms
64 bytes from 192.168.1.107: icmp_seq=4 ttl=64 time=0.042 ms
64 bytes from 192.168.1.107: icmp_seq=5 ttl=64 time=0.063 ms
^C
--- 192.168.1.107 ping statistics ---
5 packets transmitted, 5 received, 0% packet loss, time 4088ms
rtt min/avg/max/mdev = 0.042/0.053/0.063/0.007 ms
[root@localhost ~]# 
[root@localhost ~]# ping -c 1  192.168.1.107
PING 192.168.1.107 (192.168.1.107) 56(84) bytes of data.
64 bytes from 192.168.1.107: icmp_seq=1 ttl=64 time=0.035 ms

--- 192.168.1.107 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 0.035/0.035/0.035/0.000 ms
[root@localhost ~]# 

==================================================================

Linux admin  and Linux script admin 

==================================================================
For Example:-


[root@localhost ~]# echo hello india
hello india
[root@localhost ~]# echo hello india
hello india
[root@localhost ~]# echo hello india
hello india
[root@localhost ~]# echo hello india
hello india
[root@localhost ~]# echo hello india
hello india
[root@localhost ~]# 

==================================================================

FOR loop ?

==================================================================
[root@localhost ~]# x=5
[root@localhost ~]# 
[root@localhost ~]# echo $x
5
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# for i in 1 2 3 4 5
> do
> echo hello india
> date
> done


[root@localhost ~]# for i in {1..5}
> do
> date
> sleep 5 # to pause execution for 5 seconds
> done


==================================================================

[root@localhost ~]# vim test.sh 

for i in 192.168.1.{101..107}
do
       ping -c  1 $i > /dev/null 
       if [ $?  -eq 0  ]
       then
               echo  "$i is UP and Running"
       else
               echo "$i is not UP and Running"
       fi
done


:wq!


[root@localhost ~]# sh  test.sh 

==================================================================

Examples of STDIN Operator  ?

[root@localhost ~]# useradd sumit
[root@localhost ~]# 
[root@localhost ~]# passwd sumit
Changing password for user sumit.
New password: 
BAD PASSWORD: The password is shorter than 8 characters
Retype new password: 
passwd: all authentication tokens updated successfully.
[root@localhost ~]# 
[root@localhost ~]# echo 123 | passwd  sumit --stdin
Changing password for user sumit.
passwd: all authentication tokens updated successfully.
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# useradd monika
[root@localhost ~]# 
[root@localhost ~]# echo redhat | passwd --stdin monika 
Changing password for user monika.
passwd: all authentication tokens updated successfully.
[root@localhost ~]# 

==================================================================

[root@localhost ~]# for i in {1..10}
> do
> useradd linux$i
> echo fedora | passwd  --stdin  linux$i
> chage -E  2027-12-31 linux$i
> done

==================================================================
[root@localhost ~]# ls /home  
linux1   linux2  linux4  linux6  linux8  monika   sachin   sumit
linux10  linux3  linux5  linux7  linux9  natasha  student
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# for i in {1..10}
> do
> userdel -rf linux$i
> done
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# ls /home  
monika  natasha  sachin  student  sumit
[root@localhost ~]# 
[root@localhost ~]# 

===================================================================
[root@localhost ~]# vim /tmp/userinfo  


bob
harry
sarah
deep
gaurav
kapil


:wq!

[root@localhost ~]# for i in $(cat /tmp/userinfo)
> do
> useradd $i
> echo $i | passwd --stdin $i
> chage -E 2026-12-31 $i
> done
Changing password for user bob.
passwd: all authentication tokens updated successfully.
Changing password for user harry.
passwd: all authentication tokens updated successfully.
Changing password for user sarah.
passwd: all authentication tokens updated successfully.
Changing password for user deep.
passwd: all authentication tokens updated successfully.
Changing password for user gaurav.
passwd: all authentication tokens updated successfully.
Changing password for user kapil.
passwd: all authentication tokens updated successfully.
[root@localhost ~]# 




[root@localhost ~]# for i in $(cat /tmp/userinfo)
> do
> userdel -rf $i
> done
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# ls /home 
monika  natasha  sachin  student  sumit
[root@localhost ~]# 
[root@localhost ~]# 

[root@localhost ~]# vi adding.sh

read -p  "give any username: " a
b=$(grep $a /etc/passwd | cut -d: -f1)
if [ "$a" = "$b" ]
then
        echo  "$a is already exist in this machine"
else
        useradd $a
        echo $a | passwd  --stdin $a
fi


:wq!



[root@localhost ~]# sh adding.sh
give any username: rajesh
Changing password for user rajesh.
passwd: all authentication tokens updated successfully.
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# ls /home
monika  natasha  rajesh  sachin  student  sumit
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# sh adding.sh
give any username: rajesh
rajesh is already exist in this machine
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# 
=========================================================================
