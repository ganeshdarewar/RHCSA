============================================================================
Examples of crontab ?

============================================================================
[root@localhost ~]# rpm -qa cronie  
cronie-1.5.7-5.el9.x86_64
[root@localhost ~]# 
[root@localhost ~]# which crond  
/usr/sbin/crond
[root@localhost ~]# rpm -qf  /usr/sbin/crond
cronie-1.5.7-5.el9.x86_64
[root@localhost ~]# 
[root@localhost ~]# which crontab 
/usr/bin/crontab
[root@localhost ~]# 
[root@localhost ~]# rpm -qf  /usr/bin/crontab
cronie-1.5.7-5.el9.x86_64
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# rpm -qf  /etc/crontab 
crontabs-1.11-27.20190603git.el9_0.noarch
[root@localhost ~]# 
[root@localhost ~]# rpm -qa cronie  
cronie-1.5.7-5.el9.x86_64
[root@localhost ~]# 
[root@localhost ~]# rpm -qa crontabs  
crontabs-1.11-27.20190603git.el9_0.noarch
[root@localhost ~]# 

[root@localhost ~]# which crontab 
/usr/bin/crontab
[root@localhost ~]# crontab --help  

[root@localhost ~]# which rsync  
/usr/bin/rsync
[root@localhost ~]# 
[root@localhost ~]# which echo  
/usr/bin/echo
[root@localhost ~]# 
[root@localhost ~]# which reboot   
/usr/sbin/reboot
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# crontab  -l  
no crontab for root
[root@localhost ~]# 
[root@localhost ~]# 

[root@localhost ~]# which rsync  
/usr/bin/rsync
[root@localhost ~]# 
[root@localhost ~]# which echo  
/usr/bin/echo
[root@localhost ~]# 

[root@localhost ~]# crontab -e  

press i to insert text  

*/2     *       *       *       *       echo  hello india >>  /tmp/india 



:wq!

[root@localhost ~]# crontab -l 
*/2	*	*	*	*	echo  hello india >>  /tmp/india 
[root@localhost ~]# 
[root@localhost ~]# 

[root@localhost ~]# atq     [ if we are using at utility to configure any TASK ]
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# tail -f /var/log/cron
May 17 09:46:01 localhost anacron[3154]: Job `cron.weekly' started
May 17 09:46:01 localhost anacron[3154]: Job `cron.weekly' terminated
May 17 09:46:01 localhost anacron[3154]: Normal exit (2 jobs run)
May 17 09:53:03 localhost crontab[3650]: (root) LIST (root)
May 17 09:53:34 localhost crontab[3676]: (root) BEGIN EDIT (root)
May 17 09:55:55 localhost crontab[3676]: (root) REPLACE (root)
May 17 09:55:55 localhost crontab[3676]: (root) END EDIT (root)
May 17 09:55:57 localhost crontab[3689]: (root) LIST (root)
May 17 09:56:01 localhost CROND[3700]: (root) CMD (echo  hello india >>  /tmp/india )
May 17 09:56:01 localhost CROND[3698]: (root) CMDEND (echo  hello india >>  /tmp/india )

Press CTRL + C to quit  

[root@localhost ~]# cat /tmp/india 
hello india
hello india
[root@localhost ~]# 
[root@localhost ~]# crontab -r  -i  
crontab: really delete root's crontab? n
[root@localhost ~]# 
[root@localhost ~]# crontab -l  
*/2	*	*	*	*	echo  hello india >>  /tmp/india 
[root@localhost ~]# 
[root@localhost ~]# crontab -r  
[root@localhost ~]# 
[root@localhost ~]# crontab -l  
no crontab for root
[root@localhost ~]# 

[root@localhost ~]# mkdir /sqldata  
[root@localhost ~]# 
[root@localhost ~]# mkdir /backup  
[root@localhost ~]# 
[root@localhost ~]# which rsync 
/usr/bin/rsync
[root@localhost ~]# 
[root@localhost ~]# crontab  -e  

*/2     *       *       *       *       rsync -av  /sqldata   /backup 


:wq!


[root@localhost ~]# crontab  -l
*/2	*	*	*	*	rsync -av  /sqldata   /backup 
[root@localhost ~]# 
[root@localhost ~]# 

[root@localhost ~]# ls /sqldata
[root@localhost ~]# ls /backup
[root@localhost ~]# 
[root@localhost ~]# touch /sqldata/abc{1..3}
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# ls /sqldata
[root@localhost ~]# ls /backup
[root@localhost ~]# 
[root@localhost ~]# touch /sqldata/abc{1..3}
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# tail -f /var/log/cron
May 17 09:59:01 localhost crontab[3815]: (root) DELETE (root)
May 17 09:59:03 localhost crontab[3824]: (root) LIST (root)
May 17 10:01:01 localhost CROND[3900]: (root) CMD (run-parts /etc/cron.hourly)
May 17 10:01:01 localhost run-parts[3900]: (/etc/cron.hourly) starting 0anacron
May 17 10:01:01 localhost run-parts[3900]: (/etc/cron.hourly) finished 0anacron
May 17 10:01:01 localhost CROND[3899]: (root) CMDEND (run-parts /etc/cron.hourly)
May 17 10:01:17 localhost crontab[3911]: (root) BEGIN EDIT (root)
May 17 10:02:28 localhost crontab[3911]: (root) REPLACE (root)
May 17 10:02:28 localhost crontab[3911]: (root) END EDIT (root)
May 17 10:02:32 localhost crontab[3922]: (root) LIST (root)


[root@localhost ~]# tree  /sqldata
/sqldata
├── abc1
├── abc2
└── abc3

0 directories, 3 files
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# tree  /backup
/backup
└── sqldata
    ├── abc1
    ├── abc2
    └── abc3

1 directory, 3 files
[root@localhost ~]# 


[root@localhost ~]# touch /sqldata/abc{4,5,6}
[root@localhost ~]# 
[root@localhost ~]# tree  /backup
/backup
└── sqldata
    ├── abc1
    ├── abc2
    └── abc3

1 directory, 3 files
[root@localhost ~]# tree  /sqldata
/sqldata
├── abc1
├── abc2
├── abc3
├── abc4
├── abc5
└── abc6

0 directories, 6 files
[root@localhost ~]# 
[root@localhost ~]# tree /backup
/backup
└── sqldata
    ├── abc1
    ├── abc2
    ├── abc3
    ├── abc4
    ├── abc5
    └── abc6

1 directory, 6 files
[root@localhost ~]# 

[root@localhost ~]# crontab -r 
[root@localhost ~]# 
[root@localhost ~]# crontab -l  
no crontab for root
[root@localhost ~]# 
============================================================================

How we can create shell script file in linux ? ===> set of command ===> file  ===> planning  ==> save ==> script file  

script ==> types of execution method  ?

1- manually without crontab and without at utility   ====> sh  filename  
2- with crontab and with at utility  

[root@localhost ~]# vim  hello.sh  


#!/bin/bash
date  >> /tmp/example
cal   >> /tmp/example
free -h >>  /tmp/example
rsync -av  /sqldata   /backup

:wq!


1- manually without crontab and without at utility 

[root@localhost ~]# sh  /root/hello.sh 
sending incremental file list

sent 157 bytes  received 17 bytes  348.00 bytes/sec
total size is 0  speedup is 0.00
[root@localhost ~]# 

[root@localhost ~]# cat /tmp/example 
Sat May 17 10:11:09 AM IST 2025
      May 2025      
Su Mo Tu We Th Fr Sa
             1  2  3
 4  5  6  7  8  9 10
11 12 13 14 15 16 17
18 19 20 21 22 23 24
25 26 27 28 29 30 31
                    
               total        used        free      shared  buff/cache   available
Mem:           3.6Gi       1.2Gi       1.8Gi        26Mi       603Mi       2.2Gi
Swap:          2.0Gi          0B       2.0Gi
[root@localhost ~]# 
[root@localhost ~]# which sh 
/usr/bin/sh
[root@localhost ~]# 

2- with crontab and with at utility 

[root@localhost ~]# crontab -e  

*/2     *       *       *       *       sh   /root/hello.sh

:wq!

[root@localhost ~]# crontab -l
*/2	*	*	*	*	sh   /root/hello.sh
[root@localhost ~]# 
[root@localhost ~]# 

[root@localhost ~]# touch  /sqldata/tcs{1..5}
[root@localhost ~]# 
[root@localhost ~]# ls /backup/sqldata
abc1  abc2  abc3  abc4  abc5  abc6
[root@localhost ~]# 
[root@localhost ~]# ls /sqldata
abc1  abc2  abc3  abc4  abc5  abc6  tcs1  tcs2  tcs3  tcs4  tcs5
[root@localhost ~]# 

[root@localhost ~]# ls /backup/sqldata
abc1  abc2  abc3  abc4  abc5  abc6  tcs1  tcs2  tcs3  tcs4  tcs5
[root@localhost ~]# 
[root@localhost ~]# ls /sqldata
abc1  abc2  abc3  abc4  abc5  abc6  tcs1  tcs2  tcs3  tcs4  tcs5
[root@localhost ~]# 

[root@localhost ~]# crontab -l 
*/2	*	*	*	*	sh   /root/hello.sh
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# crontab -r  
[root@localhost ~]# 
[root@localhost ~]# crontab -l 
no crontab for root
[root@localhost ~]# 


[root@localhost ~]# useradd natasha
[root@localhost ~]# passwd natasha
Changing password for user natasha.
New password: 
BAD PASSWORD: The password is shorter than 8 characters
Retype new password: 
passwd: all authentication tokens updated successfully.
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# crontab -l  -u natasha  
no crontab for natasha
[root@localhost ~]# 
[root@localhost ~]# crontab -e  -u natasha  
*/2     *       *       *       *       echo hello india >>  /home/natasha/india

:wq!

[root@localhost ~]# crontab -l  -u natasha  
*/2	*	*	*	*	echo hello india >>  /home/natasha/india
[root@localhost ~]# 

[root@localhost ~]# crontab -l  -u natasha  
*/2	*	*	*	*	echo hello india >>  /home/natasha/india
[root@localhost ~]# 
[root@localhost ~]# su - natasha  
[natasha@localhost ~]$ 
[natasha@localhost ~]$ crontab -l  
*/2	*	*	*	*	echo hello india >>  /home/natasha/india
[natasha@localhost ~]$ 
[natasha@localhost ~]$ ls 
[natasha@localhost ~]$ ls  
india
[natasha@localhost ~]$ 
[natasha@localhost ~]$ cat  india 
hello india
[natasha@localhost ~]$ 
[natasha@localhost ~]$ exit
logout
[root@localhost ~]# 
[root@localhost ~]# cat /home/natasha/india 
hello india
[root@localhost ~]# 
[root@localhost ~]# crontab -r -u natasha 
[root@localhost ~]# 
[root@localhost ~]# crontab -l -u natasha 
no crontab for natasha
[root@localhost ~]# 
[root@localhost ~]# 


============================================================================
How we can apply allow and deny rules in crontab utility ?   /etc/cron.allow OR /etc/cron.deny  file  

[root@localhost ~]# cat  /etc/cron.allow 
cat: /etc/cron.allow: No such file or directory
[root@localhost ~]# 
[root@localhost ~]# cat  /etc/cron.deny 
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# vim /etc/cron.allow  
root
:wq!
[root@localhost ~]# cat  /etc/cron.deny 
[root@localhost ~]# 
[root@localhost ~]# su - natasha 
[natasha@localhost ~]$ 
[natasha@localhost ~]$ crontab -l 
You (natasha) are not allowed to use this program (crontab)
See crontab(1) for more information
[natasha@localhost ~]$ 
[natasha@localhost ~]$ crontab -e
You (natasha) are not allowed to use this program (crontab)
See crontab(1) for more information
[natasha@localhost ~]$ 
[natasha@localhost ~]$ crontab -r
You (natasha) are not allowed to use this program (crontab)
See crontab(1) for more information
[natasha@localhost ~]$ exit
logout
[root@localhost ~]# 
[root@localhost ~]# ls /home  
natasha  student
[root@localhost ~]# 
[root@localhost ~]# vim /etc/cron.allow 
root
natasha

:wq!

[root@localhost ~]# su - student 
[student@localhost ~]$ 
[student@localhost ~]$ crontab -l  
You (student) are not allowed to use this program (crontab)
See crontab(1) for more information
[student@localhost ~]$ crontab -e
You (student) are not allowed to use this program (crontab)
See crontab(1) for more information
[student@localhost ~]$ crontab -r
You (student) are not allowed to use this program (crontab)
See crontab(1) for more information
[student@localhost ~]$ 
[student@localhost ~]$ exit
logout
[root@localhost ~]# 

[root@localhost ~]# su - natasha 
[natasha@localhost ~]$ crontab -l  
no crontab for natasha
[natasha@localhost ~]$ 
[natasha@localhost ~]$ exit
logout
[root@localhost ~]# 

[root@localhost ~]# rm -rf /etc/cron.allow  
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# vim /etc/cron.deny 

natasha

:wq!


[root@localhost ~]# su - student 
[student@localhost ~]$ crontab -l  
no crontab for student
[student@localhost ~]$ exit
logout
[root@localhost ~]# 

[root@localhost ~]# su - natasha 
[natasha@localhost ~]$ 
[natasha@localhost ~]$ crontab -l  
You (natasha) are not allowed to use this program (crontab)
See crontab(1) for more information
[natasha@localhost ~]$ exit
logout
[root@localhost ~]# vim /etc/cron.deny

delete the entry

:wq!




[root@localhost ~]# su - natasha 
[natasha@localhost ~]$ crontab -l  
no crontab for natasha
[natasha@localhost ~]$ exit
logout
[root@localhost ~]# 
[root@localhost ~]# su - student 
[student@localhost ~]$ 
[student@localhost ~]$ crontab -l  
no crontab for student
[student@localhost ~]$ exit
logout
[root@localhost ~]# 

[root@localhost ~]# date 
Sat May 17 10:31:00 AM IST 2025
[root@localhost ~]# 
[root@localhost ~]# date +%A
Saturday
[root@localhost ~]# date +%d
17
[root@localhost ~]# date +%y
25
[root@localhost ~]# date +%a
Sat
[root@localhost ~]# echo $(date +%A)
Saturday
[root@localhost ~]# 

============================================================================

Month end Example 

0 0 28-31 * * [ $(date -d "+1 day" +%d) = "01" ] && /path/to/command

============================================================================

Examples of at command ?

============================================================================
[root@localhost ~]# which at 
/usr/bin/at
[root@localhost ~]# rpm -qf /usr/bin/at
at-3.1.23-10.el9.x86_64
[root@localhost ~]# 
[root@localhost ~]# atq 
[root@localhost ~]# 
[root@localhost ~]# at  -l  
[root@localhost ~]# 
[root@localhost ~]# 
============================================================================
SYNTAX:-

[root@localhost ~]# at time     ====> Note: we can metnion the time as per at command syntax 
>
>
>set of command OR script 
> 

Ctrl + D   ==> save and quit

[root@localhost ~]# atq  


 [root@localhost ~]# date 
Sat May 17 10:45:54 AM IST 2025
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# at 10:48 AM
warning: commands will be executed using /bin/sh
at> echo hello india >>  /tmp/atexamples
at> date >>  /tmp/atexamples
at> rsync -av  /sqldata  /backup 
at> <EOT>
job 1 at Sat May 17 10:48:00 2025
[root@localhost ~]# 
[root@localhost ~]# atq  
1	Sat May 17 10:48:00 2025 a root
[root@localhost ~]# 
[root@localhost ~]# at -l 
1	Sat May 17 10:48:00 2025 a root
[root@localhost ~]# 

[root@localhost ~]# at -c  1 


[root@localhost ~]# atq  
[root@localhost ~]# 
[root@localhost ~]# atq  
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# cat /tmp/atexamples 
hello india
Sat May 17 10:48:00 AM IST 2025
[root@localhost ~]# 

[root@localhost ~]# atrm  1     [to remove any scheduled job before execution if we want]
Cannot find jobid 1
[root@localhost ~]# 
[root@localhost ~]# at 10:51 AM
warning: commands will be executed using /bin/sh
at> sh /root/hello.sh
at> <EOT>
job 2 at Sat May 17 10:51:00 2025
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# atq 
2	Sat May 17 10:51:00 2025 a root
[root@localhost ~]# 
[root@localhost ~]# at -c 2 



============================================================================

HELP DOCUMENTS

https://tecadmin.net/one-time-task-scheduling-using-at-commad-in-linux/

https://crontab.guru/examples.html

============================================================================










